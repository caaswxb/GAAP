#! /usr/bin/perl -w 

=head1 Name

  cov_snp_dot.pl

=head1 Description

  Generate a dotplot about reads coverage and SNP density of windows of a genome
  sequences.

=head1 Version

  Author: Zhang Yong
  Date: 2021.5.18

=head1 Usage
 
  cov_snp_dot.pl
    -r <FILE>           genome assembly in a fasta file
    -i <FILE>           fastq1 file. Can be set more than one time
    -I <FILE>           fastq2 file. Can be set more than one time
    -l <FILE>           file listing fastq files. Read1 and read2 delimited with tab
    -w                  path to file of windows, will be generated by bedtools if missing
    -b                  path to bam file
    -v                  path to vcf/bcf file
    -s                  windows size, defult 100,000
    -p                  plot type (pdf,png)
    -o                  out prefix
    -d                  out directory
    --bedtools          path to bedtools
    --bcftools          path to bcftools
    -h                  print help information

=cut

use strict;
use Getopt::Long;
use Data::Dumper;
use FindBin qw($RealBin);
Getopt::Long::Configure qw( bundling no_ignore_case );

my $task = "cov_snp_dot";
my $mode = 0;

my ($assembly,@reads1,@reads2,$file_list,$threads,$fwindows,$bam,$vcf,$win_size,$prefix,$dir,$bedtools,$bcftools,$Rscript,$help);
my $type = 'png';
GetOptions(
    "r:s"        => \$assembly,
    "i:s"        => \@reads1,
    "I:s"        => \@reads2,
    "l|list:s"   => \$file_list,
	"t:i"        => \$threads,
	"w:s"        => \$fwindows,
	"b:s"        => \$bam,
	"v:s"        => \$vcf,
	"s:i"        => \$win_size,
	"p:s"        => \$type,
	"o:s"        => \$prefix,
 	"d:s"        => \$dir,
	"bedtools:s" => \$bedtools,
	"bcftools:s" => \$bcftools,
	"Rscript:s"  => \$Rscript,
	"h"          => \$help
);

die `pod2text $0` if $help;
die `pod2text $0` if !@reads1 && !@reads2 && !$file_list && !$bam;

$dir = "gaap_${task}_$$" unless $dir;
if (! -e $dir){
	if (system "mkdir -p $dir"){
		die "[$task] Error! Can't make directory:\"$dir\"\n";
	}
}
$prefix = "bkp_output_$$" unless $prefix;
my $prefix_out = "$dir/$prefix" if $dir;


my $hist = "$prefix_out.${task}_$$.hist";

##Check software.
$bcftools = $bcftools ? check_software("bcftools", $bcftools) : check_software("bcftools");
die "[$task] Error! bcftools is not found.
[$task] Check your config file or set it in your environment.\n" if $bcftools eq "-1";
$bedtools = $bedtools ? check_software("bedtools", $bedtools) : check_software("bedtools");
die "[$task] Error! bedtools is not found.
[$task] Check your config file or set it in your environment.\n" if $bedtools eq "-1";
$Rscript = $Rscript ? check_software("Rscript", $Rscript) : check_software("Rscript");
die "[$task] Error! Rscript is not found.
[$task] Check your config file or set it in your environment.\n" if $Rscript eq "-1";

if (!$vcf && !$bam) {
	system "mkdir -p $dir/../mapping/NGS_mapping/";
	my $map_cmd = "$RealBin/run_bwa.pl -r $assembly ";
	for (my $i = 0; $i <= $#reads1 && $i <= $#reads2; $i++) {
		$map_cmd .= "-i $reads1[$i] -I $reads2[$i] ";
	}
	$map_cmd .= "-l $file_list " if $file_list;
	$map_cmd .= "-t $threads "   if $threads;
	$map_cmd .= "-d $dir/../mapping/NGS_mapping ";
	$map_cmd .= "-o $prefix ";
	_system($map_cmd, $mode);
	$bam = "$dir/../mapping/NGS_mapping/$prefix.paired.sorted.bam";
	
	system "mkdir -p $dir/../variants/";
	my $var_cmd = "$RealBin/var_calling.pl -r $assembly ";
	$var_cmd .= "-b $bam ";
	$var_cmd .= "-t $threads "   if $threads;
	$var_cmd .= "-d $dir/../variants/ ";
	$var_cmd .= "-o $prefix ";
	_system($var_cmd, $mode);
	$vcf = "$dir/../variants/$prefix.flt.vcf"
}

##--read length--##
my $seq_len = read_header($bam);
my $tolen = 0;
$tolen += $_ for @$seq_len;
$win_size = int($tolen/5000) if !$win_size;
##--make windiows--##
if ( ! $fwindows ) {
	$fwindows = "$dir/${prefix}_${win_size}_windows.txt";
	open WIN, '>', $fwindows || die "Can't open such file: $fwindows.\n";
	for my $a ( @{$seq_len} ) {
		my $start = 0;
		my $end = 0;
		for  ( my $i = 1; $i <= int($a->[1]/$win_size); $i++ ) {
			$end = $i * $win_size;
			print WIN join("\t",$a->[0],$start,$end),"\n";
			$start = $end;
		}
		print WIN join("\t",$a->[0],$start,$a->[1]),"\n" if ( $end < $a->[1] );
	}
	close WIN;
}
##--check windiows--##
##--read windows--##
my %windows = ();
open WIN, '<', $fwindows || die "Can't open such file: $fwindows.\n";
while (<WIN>) {
	chomp;
	my @line = split;
	$windows{$line[0]}{$line[1]} = 0;
}
close WIN;
#print Dumper(\%windows);

##--SNP density--##
window2SNPden(\%windows);

##--Coverage--##
my $cmd = "$bedtools coverage -mean -sorted -bed -nobuf ";
   $cmd .= "-a $fwindows ";
   $cmd .= "-b $bam";
print STDERR $cmd;
open COV, '-|', $cmd || die "[$task] Fail to open pipe: $cmd.\n";
open OUT, '>', $hist || die "[$task] Fail to open pipe: $hist.\n";
while (<COV>) {
	chomp;
	my @line = split;
	print OUT "$_\t", $windows{$line[0]}{$line[1]}/($line[2]-$line[1])*100, "\n";
}
close COV;
close OUT;

my $plot_cmd = "$Rscript $RealBin/snp_coverage_dotplot.R $hist $prefix_out $type";
_system($plot_cmd);

#---------------------------------Subroutine-----------------------------------#
sub read_header {
        my $bam = shift;
        my $length = [];
        my $pip = "samtools view -H $bam ";
        open my $BAM, '-|', $pip || die "Fail to read header of $bam.\n";
        while (<$BAM>) {
                /^\@SQ\s+SN:(\S+)\s+LN:(\d+)/ ? push @$length, [$1,$2] : next;
        }
        die "Fail to read header of $bam.\n" unless (@{$length});
        return $length;
}

sub window2SNPden {
	my $win = shift;
	open VCF, '-|', "$bcftools view -i 'GT=\"het\" && TYPE=\"snp\"' $vcf" || die "Fail to open pipe: $bcftools view $vcf.\n";
	while (<VCF>) {
		next if ( /^#/ );
		my ($chr,$posi) = (split/\s+/,$_,3)[0,1];
		my $index = (int($posi/$win_size)) * $win_size;
		#print join("\t",$posi$win_size,$win_size),"\n";
		#print $index,"\n";
		$win->{$chr}{$index} += 1;
	}
	close VCF;
	#print Dumper($win);
	return;
}

sub check_software {
	my $software = shift;
	my $path = shift if @_;
	if ( $path ) {
		if ( basename($path) eq $software && -X $path ) {
			$software = $path;
		}else {
			return "-1";
		}
	}else {
		my @path = split /:/, $ENV{PATH};
		foreach ( @path ) {
			$_ =~ s/\/$//; 
			return $software = "$_/$software" if -X "$_/$software";
		}
		return "-1";
	}
}

sub _system {
	my $cmd = shift;
	my $mode = shift if @_;
	if ( $mode == 1 ) {
		print $cmd,"\n";
	}else {
		print $cmd,"\n";
		die "[$task] Can't run \"$cmd\".\n" if ( system $cmd );
	}
	return;
}