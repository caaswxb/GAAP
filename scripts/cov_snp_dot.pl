#! /usr/bin/perl -w 

=head1 Name

  cov_snp_dot.pl

=head1 Description

  Generate a dotplot about reads coverage and SNP density of windows of a genome
  sequences.

=head1 Version

  Author: Zhang Yong
  Date: 2021.5.18

=head1 Usage
 
  cov_snp_dot.pl
  -w                path to file of windows, will be generated by bedtools if missing
  -b                path to bam file
  -v                path to vcf/bcf file
  -s <INT>          windows size, defult 100,000
  --bedtools        path to bedtools
  --bcftools        path to bcftools
  -h                print help information

=cut

use strict;
use Getopt::Long;
use Data::Dumper;

my $task = "cov_snp_dot";

my ($fwindows,$bam,$vcf,$bedtools,$bcftools,$help);
my $win_size = 100000;
GetOptions(
	"w:s"        => \$fwindows,
	"b:s"        => \$bam,
	"v:s"        => \$vcf,
	"s:i"        => \$win_size,
	"bedtools:s" => \$bedtools,
	"bcftools:s" => \$bcftools,
	"h"          => \$help
);

die `pod2text $0` if $help;

##Check software.
$bcftools = $bcftools ? check_software("bcftools", $bcftools) : check_software("bcftools");
die "[$task] Error! bcftools is not found.
[$task] Check your config file or set it in your environment.\n" if $bcftools eq "-1";
$bedtools = $bedtools ? check_software("bedtools", $bedtools) : check_software("bedtools");
die "[$task] Error! bedtools is not found.
[$task] Check your config file or set it in your environment.\n" if $bedtools eq "-1";

##--read length--##
my $seq_len = read_header($bam);

##--make windiows--##
if ( ! $fwindows ) {
$fwindows = "${ARGV[0]}_temp_${win_size}_windows.txt";
        open WIN, '>', $fwindows || die "Can't open such file: $fwindows.\n";
        foreach my $a ( @{$seq_len} ) {
                my $start = 0;
                my $end = 0;
                for  ( my $i = 1; $i <= int($a->[1]/$win_size); $i++ ) {
                                $end = $i * $win_size;
                                print WIN join("\t",$a->[0],$start,$end),"\n";
                                $start = $end;
                }
                print WIN join("\t",$a->[0],$start,$a->[1]),"\n" if ( $end < $a->[1] );
        }
        close WIN;
}
##--check windiows--##
##--read windows--##
my %windows = ();
open WIN, '<', $fwindows || die "Can't open such file: $fwindows.\n";
while (<WIN>) {
	chomp;
	my @line = split;
	$windows{$line[0]}{$line[1]} = 0;
}
close WIN;
#print Dumper(\%windows);

##--SNP density--##
window2SNPden(\%windows);

##--Coverage--##
my $cmd = "$bedtools coverage -mean -sorted -bed -nobuf ";
   $cmd .= "-a $fwindows ";
   $cmd .= "-b $bam";
print STDERR $cmd;
open COV, '-|', $cmd || die "Fail to open pipe: $cmd.\n";
while (<COV>) {
	chomp;
	my @line = split;
	print "$_\t", $windows{$line[0]}{$line[1]}/($line[2]-$line[1])*100, "\n";
}
close COV;

#---------------------------------Subroutine-----------------------------------#
sub read_header {
        my $bam = shift;
        my $length = [];
        my $pip = "samtools view -H $bam ";
        open my $BAM, '-|', $pip || die "Fail to read header of $bam.\n";
        while (<$BAM>) {
                /^\@SQ\s+SN:(\S+)\s+LN:(\d+)/ ? push @$length, [$1,$2] : next;
        }
        die "Fail to read header of $bam.\n" unless (@{$length});
        return $length;
}

sub window2SNPden {
	my $win = shift;
	open VCF, '-|', "$bcftools view -i 'GT=\"het\" && TYPE=\"snp\"' $vcf" || die "Fail to open pipe: $bcftools view $vcf.\n";
	while (<VCF>) {
		next if ( /^#/ );
		my ($chr,$posi) = (split/\s+/,$_,3)[0,1];
		my $index = (int($posi/$win_size)) * $win_size;
		#print join("\t",$posi$win_size,$win_size),"\n";
		#print $index,"\n";
		$win->{$chr}{$index} += 1;
	}
	close VCF;
	#print Dumper($win);
	return;
}

sub check_software {
	my $software = shift;
	my $path = shift if @_;
	if ( $path ) {
		if ( basename($path) eq $software && -X $path ) {
			$software = $path;
		}else {
			return "-1";
		}
	}else {
		my @path = split /:/, $ENV{PATH};
		foreach ( @path ) {
			$_ =~ s/\/$//; 
			return $software = "$_/$software" if -X "$_/$software";
		}
		return "-1";
	}
}
